{"version":3,"sources":["webpack:///../src/__docs__/ctx.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"mcAMO,IAAMA,EAAe,Q,qKAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,UADR,UAGA,iPACA,iBAAQ,CACN,GAAM,SADR,SAGA,uBAAK,sBAAMC,WAAW,OAAU,CAC5B,UAAa,wBADZ,uEAKL,qFAAoE,0BAAYA,WAAW,KAAvB,SAApE,qDACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,yHAUL,+CAA8B,0BAAYA,WAAW,KAAvB,gBAA9B,+GAAsM,0BAAYA,WAAW,KAAvB,WAAtM,gFACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,gI,4JAWTJ,EAAWK,gBAAiB","file":"component---src-docs-ctx-mdx-d5aa2247dae76676de5a.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/frankiebagnardi/github/brigand/rearm/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"intent\"\n    }}>{`Intent`}</h1>\n    <p>{`The Ctx module provides a stable and declarative interface to the concept of \"context\" in React. One component is used for creating, transforming, and accessing context. It can do any combination of these operations.`}</p>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import { makeCtx } from 'rearm/lib/Ctx';\nconst Ctx = makeCtx();\n`}</code></pre>\n    <p>{`Anywhere in the tree you can define the context by using the `}<inlineCode parentName=\"p\">{`value`}</inlineCode>{` prop. This in no way affects the parent context.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`render() {\n  return (\n    <Ctx.Provider value={{ color: 'hotpink' }}>\n      <B />\n    </Ctx.Provider>\n  );\n}\n`}</code></pre>\n    <p>{`Within the children of `}<inlineCode parentName=\"p\">{`Ctx.Provider`}</inlineCode>{`, no matter how deep, we can map the context to React nodes in render by passing a render callback child to `}<inlineCode parentName=\"p\">{`Ctx.use`}</inlineCode>{` hook. The render callback will run any time the nearest parent Ctx updates.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`function B() {\n  const pink = Ctx.use(state => state.color);\n  return <p style={{ color: pink }}>Hello, World!</p>;\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}