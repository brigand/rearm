(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{974:function(e,t,n){"use strict";n.r(t);n(10),n(6),n(5),n(3),n(9),n(4);var r=n(8),c=n(77),a=n(962),o=n(1),i=n.n(o),u=function(){function e(){this.state=void 0,this.subs=[]}var t=e.prototype;return t.subscribe=function(e){var t=this,n=function(){void 0!==t.state&&e(t.state)};this.subs.push(n);return function(){var e=t.subs.indexOf(n);-1!==e&&t.subs.splice(e,1)}},t.replaceState=function(e){this.state=e},t.notifyAll=function(){this.subs.forEach((function(e){return e()}))},e}();function s(){var e=o.createContext(new u);return{Provider:function(t){var n=t.value,c=t.children;if("function"==typeof c)throw new Error("The 'children' prop cannot be a function");var a=o.useMemo((function(){return new u}),[]);return a.state=n,o.useEffect((function(){a.notifyAll()}),[n]),Object(r.c)(e.Provider,{value:a},c)},use:function(t){void 0===t&&(t=void 0);var n=o.useContext(e),r=o.useState(!1)[1],c=function(e){if(void 0===t&&"function"!=typeof t)return e;if("function"==typeof t)return t(e);throw new Error("Expected the selector to be a function or null/undefined")};if(void 0===n.state)throw new Error("useSelector must be used in a child of the provider");var a=o.useRef(c(n.state));return o.useEffect((function(){return n.subscribe((function(e){var t=c(e);t!==a.current&&(a.current=t,r((function(e){return!e})))}))}),[t]),a.current}}}function l(e){var t=o.useRef(-1);return t.current+=1,Object(r.c)("div",{className:"update-counter"},"Updates: ",t.current)}"undefined"!=typeof Selector&&Selector&&Selector===Object(Selector)&&Object.isExtensible(Selector)&&Object.defineProperty(Selector,"__filemeta",{configurable:!0,value:{name:"Selector",filename:"packages/ctx/src/ctx.tsx"}}),"undefined"!=typeof ProviderProps&&ProviderProps&&ProviderProps===Object(ProviderProps)&&Object.isExtensible(ProviderProps)&&Object.defineProperty(ProviderProps,"__filemeta",{configurable:!0,value:{name:"ProviderProps",filename:"packages/ctx/src/ctx.tsx"}}),"undefined"!=typeof Ctx&&Ctx&&Ctx===Object(Ctx)&&Object.isExtensible(Ctx)&&Object.defineProperty(Ctx,"__filemeta",{configurable:!0,value:{name:"Ctx",filename:"packages/ctx/src/ctx.tsx"}}),s&&s===Object(s)&&Object.isExtensible(s)&&Object.defineProperty(s,"__filemeta",{configurable:!0,value:{name:"makeCtx",filename:"packages/ctx/src/ctx.tsx"}});var b=l;l&&l===Object(l)&&Object.isExtensible(l)&&Object.defineProperty(l,"__filemeta",{configurable:!0,value:{name:"UpdateCounter",filename:"packages/ctx/src/__docs__/UpdateCounter.tsx"}});n(972);var p=s(),d=["#676767","#e4572e","#1c2541","#17bebb","#76b041"],f=["#f2f2f2","#C1E7E3","#DCFFFB","#FFDCF4","#DABFDE","#C1BBDD"];function m(e,t){return e[(e.indexOf(t)+1)%e.length]}function h(){var e=p.use();return Object(r.c)("dl",null,Object(r.c)("dt",null),Object(r.c)("dt",null,"Background"),Object(r.c)("dd",null,Object(r.c)("button",{type:"button",onClick:function(){return e.update("bg",m(f,e.bg))}},e.bg)),Object(r.c)("dd",null,Object(r.c)(b,null)),Object(r.c)("dt",null,"Foreground"),Object(r.c)("dd",null,Object(r.c)("button",{type:"button",onClick:function(){return e.update("fg",m(d,e.fg))}},e.fg)))}function O(e){var t=p.use((function(e){return e.fg}));return Object(r.c)("article",{style:{color:t}},Object(r.c)(b,null),Object(r.c)("p",null,"Etiam commodo diam ut pulvinar tincidunt. Morbi nec erat ac enim pretium posuere et rhoncus urna. Vivamus neque justo, consequat eget neque vitae, dictum hendrerit metus."),Object(r.c)("p",null,"Vestibulum faucibus, risus sit amet tincidunt efficitur, turpis lectus aliquam lectus, quis rutrum nibh massa sed metus."),Object(r.c)("p",null,"Integer maximus justo sed tincidunt pellentesque. Sed gravida velit vitae est laoreet euismod."),Object(r.c)("p",null,"Ut eget accumsan mauris. Aliquam non augue ac metus faucibus faucibus."),Object(r.c)("p",null,"Ut et mi et enim ultrices luctus. In quam nulla, egestas id egestas id, blandit eu nisi."))}function j(e){var t=p.use((function(e){return e.bg}));return Object(r.c)("section",{style:{background:t}},Object(r.c)(b,null),Object(o.useMemo)((function(){return Object(r.c)(O,null)}),[]))}function x(e){var t=i.a.useState(d[0]),n=t[0],c=t[1],a=i.a.useState(f[0]),u=a[0],s=a[1],l={fg:n,bg:u,update:function(e,t){"fg"===e?c(t):s(t)}},b=Object(o.useMemo)((function(){return Object(r.c)("div",{className:"rearm-ctx-example"},Object(r.c)(h,null),Object(r.c)(j,null))}),[]);return Object(r.c)(p.Provider,{value:l},b)}var g=x;function v(){return(v=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}x&&x===Object(x)&&Object.isExtensible(x)&&Object.defineProperty(x,"__filemeta",{configurable:!0,value:{name:"CtxExample",filename:"packages/ctx/src/__docs__/CtxExample.tsx"}}),n.d(t,"_frontmatter",(function(){return y})),n.d(t,"default",(function(){return _}));var y={};void 0!==y&&y&&y===Object(y)&&Object.isExtensible(y)&&Object.defineProperty(y,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"packages/ctx/src/__docs__/ctx.mdx"}});var C={_frontmatter:y},w=a.a;function _(e){var t=e.components,n=function(e,t){if(null==e)return{};var n,r,c={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(c[n]=e[n]);return c}(e,["components"]);return Object(c.b)(w,v({},C,n,{components:t,mdxType:"MDXLayout"}),Object(c.b)("h1",{id:"rearmctx"},"@rearm/ctx"),Object(c.b)("h2",{id:"intent"},"Intent"),Object(c.b)("p",null,'The Ctx module provides a stable and declarative interface to the concept of "context" in React. It\'s represented as a single object with\na ',Object(c.b)("inlineCode",{parentName:"p"},"Provider")," and a ",Object(c.b)("inlineCode",{parentName:"p"},"use")," hook as the two sides."),Object(c.b)("p",null,"Unlike a typical React context, a component may subscribe to specific parts of the context,\nor computations based on the context. This has been a very important aspect of react-redux for many years, and can\nnow be leveraged with custom contexts."),Object(c.b)("h2",{id:"usage"},"Usage"),Object(c.b)("p",null,"First create your context instance. You may create as many as you like, and there is no interaction\nbetween separate contexts, so it's suitable for applications and libraries."),Object(c.b)("pre",null,Object(c.b)("code",v({parentName:"pre"},{className:"language-javascript"}),"import { makeCtx } from 'rearm/lib/Ctx';\nconst MyCtx = makeCtx();\n")),Object(c.b)("p",null,"If you're using typescript, you may wish to explicitly define a type for the context. As you would expect,\nboth ",Object(c.b)("inlineCode",{parentName:"p"},"Provider")," and ",Object(c.b)("inlineCode",{parentName:"p"},"use")," will incorporate the generic in their types."),Object(c.b)("pre",null,Object(c.b)("code",v({parentName:"pre"},{className:"language-typescript"}),"import { makeCtx, Ctx } from 'rearm/lib/Ctx';\nconst MyCtx: Ctx<{ color: string}> = makeCtx();\n")),Object(c.b)("p",null,"Anywhere in the tree you can define the context by rendering a ",Object(c.b)("inlineCode",{parentName:"p"},"Provider")," with the ",Object(c.b)("inlineCode",{parentName:"p"},"value"),"\nyou would like to pass through context. You may have multiple instances of the ",Object(c.b)("inlineCode",{parentName:"p"},"Provider"),' rendered\nin different parts of the page, or "shadow" a parent provider if they\'re nested. A ',Object(c.b)("inlineCode",{parentName:"p"},"MyCtx.Provider"),"\nmust exist as an (indirect) parent of any component attempting to call ",Object(c.b)("inlineCode",{parentName:"p"},"MyCtx.use"),"."),Object(c.b)("pre",null,Object(c.b)("code",v({parentName:"pre"},{className:"language-javascript"}),"render() {\n  return (\n    <MyCtx.Provider value={{ color: 'hotpink' }}>\n      <B />\n    </MyCtx.Provider>\n  );\n}\n")),Object(c.b)("p",null,"You may then access the context by calling ",Object(c.b)("inlineCode",{parentName:"p"},"Ctx.use")," with an optional selector function. If not provided,\nthen the entire context value will be returned."),Object(c.b)("pre",null,Object(c.b)("code",v({parentName:"pre"},{className:"language-javascript"}),"function B() {\n  const color = Ctx.use(state => state.color);\n  return <p style={{ color }}>Hello, World!</p>;\n}\n")),Object(c.b)("p",null,"If you use typescript, then the value of ",Object(c.b)("inlineCode",{parentName:"p"},"color")," should be inferred to be ",Object(c.b)("inlineCode",{parentName:"p"},"string"),", as we defined\nthe context to be `Ctx<{ color: string }>."),Object(c.b)("h2",{id:"example"},"Example"),Object(c.b)("p",null,"Here we have a few components that share a context with a foreground color, background color,\nand a callback which can update either."),Object(c.b)("pre",null,Object(c.b)("code",v({parentName:"pre"},{className:"language-typescript"}),"type Theme = {\n  fg: string;\n  bg: string;\n  update: (key: 'fg' | 'bg', value: string) => void;\n};\nconst ThemeCtx: Ctx<Theme> = makeCtx();\n")),Object(c.b)("p",null,"Try pressing the buttons and notice the update counters, which are incremented on\neach render of the respective components."),Object(c.b)(g,{mdxType:"CtxExample"}),Object(c.b)("p",null,"The first section, it accesses the entire context with ",Object(c.b)("inlineCode",{parentName:"p"},"const theme = ThemeCtx.use()"),", and as\nsuch the containing component will render in reaction to any context update."),Object(c.b)("p",null,"The other two components either access the foreground or background color individually."),Object(c.b)("pre",null,Object(c.b)("code",v({parentName:"pre"},{className:"language-typescript"}),"const fg = ThemeCtx.use((theme) => theme.fg);\n")),Object(c.b)("p",null,"The result of evaluating that function doesn't change if only ",Object(c.b)("inlineCode",{parentName:"p"},"theme.bg")," is updated, so this\ncomponent isn't forced to update itself for changes it's unaffected by."),Object(c.b)("p",null,"Note that by default, any update in React will cause the entire sub tree to update, so using\nan update blocking technique like ",Object(c.b)("inlineCode",{parentName:"p"},"React.memo")," or ",Object(c.b)("inlineCode",{parentName:"p"},"React.useMemo")," is required to limit the\nnatural rendering caused by any state change."),Object(c.b)("p",null,"The example uses such a technique in the root component. You normally don't need to worry about this,\nbut if you are having performance issues due to context updates, it's a good thing to try."),Object(c.b)("pre",null,Object(c.b)("code",v({parentName:"pre"},{className:"language-typescript"}),"function CtxExample(props: {}) {\n  const [fg, setFg] = React.useState(FG_COLORS[0]);\n  const [bg, setBg] = React.useState(BG_COLORS[0]);\n  const theme: Theme = {\n    fg,\n    bg,\n    update(key, value) {\n      key === 'fg' ? setFg(value) : setBg(value);\n    },\n  };\n\n  const children = useMemo(\n    () => (\n      <div className=\"rearm-ctx-example\">\n        <Selector />\n        <Page />\n      </div>\n    ),\n    [],\n  );\n\n  return <ThemeCtx.Provider value={theme}>{children}</ThemeCtx.Provider>;\n}\n")))}_&&_===Object(_)&&Object.isExtensible(_)&&Object.defineProperty(_,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"packages/ctx/src/__docs__/ctx.mdx"}}),_.isMDXComponent=!0}}]);
//# sourceMappingURL=component---packages-ctx-src-docs-ctx-mdx-dee360b950ec345f1215.js.map