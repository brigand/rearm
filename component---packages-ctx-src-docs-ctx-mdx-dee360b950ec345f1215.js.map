{"version":3,"sources":["webpack:///../packages/ctx/src/ctx.tsx","webpack:///../packages/ctx/src/__docs__/UpdateCounter.tsx","webpack:///../packages/ctx/src/__docs__/CtxExample.tsx","webpack:///../packages/ctx/src/__docs__/ctx.mdx"],"names":["CtxStore","state","undefined","subs","subscribe","handler","sub","this","push","index","indexOf","splice","replaceState","newState","notifyAll","forEach","makeCtx","Context","React","Provider","value","children","Error","store","use","selector","forceUpdate","compute","prevState","result","current","x","UpdateCounter","props","updates","className","ThemeCtx","FG_COLORS","BG_COLORS","next","list","length","Selector","theme","type","onClick","update","bg","fg","Content","style","color","Page","background","useMemo","CtxExample","useState","setFg","setBg","key","_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","isMDXComponent"],"mappings":"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","file":"component---packages-ctx-src-docs-ctx-mdx-dee360b950ec345f1215.js","sourcesContent":["/* eslint react/prop-types: 0 */\nimport * as React from 'react';\n\ntype Sub = () => void;\ntype Handler<T> = (state: T) => void;\n\nclass CtxStore<T> {\n  state: T | void = undefined;\n  subs: Array<Sub> = [];\n\n  subscribe(handler: Handler<T>) {\n    const sub = () => {\n      if (this.state !== undefined) {\n        handler(this.state);\n      }\n    };\n\n    this.subs.push(sub);\n\n    const unsubscribe = () => {\n      const index = this.subs.indexOf(sub);\n\n      if (index !== -1) {\n        this.subs.splice(index, 1);\n      }\n    };\n\n    return unsubscribe;\n  }\n\n  replaceState(newState: any) {\n    this.state = newState;\n  }\n\n  notifyAll() {\n    this.subs.forEach((sub) => sub());\n  }\n}\n\nexport type Selector<T, U> = ((state: T) => U);\n\ninterface UseSelector<T> {\n  (): T;\n  <U>(selector: Selector<T, U>): U;\n  <U>(selector: Selector<T, U> | void): T | U;\n}\n\nexport type ProviderProps<T> = { value: T; children: React.ReactChild };\nexport type Ctx<T> = {\n  Provider: React.SFC<ProviderProps<T>>;\n  use: UseSelector<T>;\n};\n\nfunction makeCtx<T>(): Ctx<T> {\n  const Context: React.Context<CtxStore<T>> = React.createContext(new CtxStore());\n\n  function useSelector(): T;\n  function useSelector<U>(selector: Selector<T, U>): U;\n  function useSelector<U>(selector: Selector<T, U> | void = undefined) {\n    const store: CtxStore<T> = React.useContext(Context);\n    const [, forceUpdate] = React.useState(false);\n\n    const compute = (state: T) => {\n      if (selector === undefined && typeof selector !== 'function') {\n        return state;\n      } else if (typeof selector === 'function') {\n        return selector(state);\n      } else {\n        throw new Error('Expected the selector to be a function or null/undefined');\n      }\n    };\n\n    if (store.state === undefined) {\n      throw new Error(`useSelector must be used in a child of the provider`);\n    }\n\n    const prevState = React.useRef(compute(store.state));\n\n    React.useEffect(\n      () => {\n        const unsub = store.subscribe((state: T) => {\n          const result = compute(state);\n          if (result !== prevState.current) {\n            prevState.current = result;\n            forceUpdate((x) => !x);\n          }\n        });\n\n        // detach when unmount\n        return unsub;\n      },\n      [selector],\n    );\n\n    return prevState.current;\n  }\n\n  return {\n    Provider: function CtxProvider({ value, children }: ProviderProps<T>) {\n      if (typeof children === 'function')\n        throw new Error(\"The 'children' prop cannot be a function\");\n\n      const store: CtxStore<T> = React.useMemo(() => new CtxStore(), []);\n      store.state = value;\n\n      React.useEffect(\n        () => {\n          store.notifyAll();\n        },\n        [value],\n      );\n\n      return <Context.Provider value={store}>{children}</Context.Provider>;\n    },\n    use: useSelector,\n  };\n}\n\nexport { makeCtx };\n","import * as React from 'react';\n\nfunction UpdateCounter(props: {}) {\n  const updates = React.useRef(-1);\n  updates.current += 1;\n  return <div className=\"update-counter\">Updates: {updates.current}</div>;\n}\n\nexport default UpdateCounter;\n","import React, { useMemo } from 'react';\nimport { makeCtx, Ctx } from '../ctx';\nimport UpdateCounter from './UpdateCounter';\nimport './CtxExample.css';\n\n// The type for the value we'll pass through context.\ntype Theme = {\n  fg: string;\n  bg: string;\n  update: (key: 'fg' | 'bg', value: string) => void;\n};\n\n// Contains the `Provider` and the `use` method.\nconst ThemeCtx: Ctx<Theme> = makeCtx();\n\nconst FG_COLORS = ['#676767', '#e4572e', '#1c2541', '#17bebb', '#76b041'];\nconst BG_COLORS = ['#f2f2f2', '#C1E7E3', '#DCFFFB', '#FFDCF4', '#DABFDE', '#C1BBDD'];\n\n// Allows cycling through a list without storing the index.\nfunction next<T>(list: Array<T>, current: T): T {\n  return list[(list.indexOf(current) + 1) % list.length];\n}\n\n// This is the interactive component and it updates on each render.\nfunction Selector() {\n  const theme = ThemeCtx.use();\n\n  return (\n    <dl>\n      <dt />\n      <dt>Background</dt>\n      <dd>\n        <button\n          type=\"button\"\n          onClick={() => theme.update('bg', next(BG_COLORS, theme.bg))}\n        >\n          {theme.bg}\n        </button>\n      </dd>\n      <dd>\n        <UpdateCounter />\n      </dd>\n      <dt>Foreground</dt>\n      <dd>\n        <button\n          type=\"button\"\n          onClick={() => theme.update('fg', next(FG_COLORS, theme.fg))}\n        >\n          {theme.fg}\n        </button>\n      </dd>\n    </dl>\n  );\n}\n\nfunction Content(props: {}) {\n  const fg = ThemeCtx.use((theme) => theme.fg);\n  return (\n    <article style={{ color: fg }}>\n      <UpdateCounter />\n      <p>\n        Etiam commodo diam ut pulvinar tincidunt. Morbi nec erat ac enim pretium\n        posuere et rhoncus urna. Vivamus neque justo, consequat eget neque vitae,\n        dictum hendrerit metus.\n      </p>\n      <p>\n        Vestibulum faucibus, risus sit amet tincidunt efficitur, turpis lectus aliquam\n        lectus, quis rutrum nibh massa sed metus.\n      </p>\n      <p>\n        Integer maximus justo sed tincidunt pellentesque. Sed gravida velit vitae est\n        laoreet euismod.\n      </p>\n      <p>Ut eget accumsan mauris. Aliquam non augue ac metus faucibus faucibus.</p>\n      <p>\n        Ut et mi et enim ultrices luctus. In quam nulla, egestas id egestas id,\n        blandit eu nisi.\n      </p>\n    </article>\n  );\n}\n\nfunction Page(props: {}) {\n  const bg = ThemeCtx.use((theme) => theme.bg);\n  return (\n    <section style={{ background: bg }}>\n      <UpdateCounter />\n      {useMemo(() => <Content />, [])}\n    </section>\n  );\n}\n\nfunction CtxExample(props: {}) {\n  const [fg, setFg] = React.useState(FG_COLORS[0]);\n  const [bg, setBg] = React.useState(BG_COLORS[0]);\n  const theme: Theme = {\n    fg,\n    bg,\n    update(key, value) {\n      key === 'fg' ? setFg(value) : setBg(value);\n    },\n  };\n\n  const children = useMemo(\n    () => (\n      <div className=\"rearm-ctx-example\">\n        <Selector />\n        <Page />\n      </div>\n    ),\n    [],\n  );\n\n  return <ThemeCtx.Provider value={theme}>{children}</ThemeCtx.Provider>;\n}\n\nexport default CtxExample;\n","import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/frankiebagnardi/github/brigand/rearm/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport CtxExample from './CtxExample.tsx';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"rearmctx\"\n    }}>{`@rearm/ctx`}</h1>\n\n    <h2 {...{\n      \"id\": \"intent\"\n    }}>{`Intent`}</h2>\n    <p>{`The Ctx module provides a stable and declarative interface to the concept of \"context\" in React. It's represented as a single object with\na `}<inlineCode parentName=\"p\">{`Provider`}</inlineCode>{` and a `}<inlineCode parentName=\"p\">{`use`}</inlineCode>{` hook as the two sides.`}</p>\n    <p>{`Unlike a typical React context, a component may subscribe to specific parts of the context,\nor computations based on the context. This has been a very important aspect of react-redux for many years, and can\nnow be leveraged with custom contexts.`}</p>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <p>{`First create your context instance. You may create as many as you like, and there is no interaction\nbetween separate contexts, so it's suitable for applications and libraries.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import { makeCtx } from 'rearm/lib/Ctx';\nconst MyCtx = makeCtx();\n`}</code></pre>\n    <p>{`If you're using typescript, you may wish to explicitly define a type for the context. As you would expect,\nboth `}<inlineCode parentName=\"p\">{`Provider`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`use`}</inlineCode>{` will incorporate the generic in their types.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`import { makeCtx, Ctx } from 'rearm/lib/Ctx';\nconst MyCtx: Ctx<{ color: string}> = makeCtx();\n`}</code></pre>\n    <p>{`Anywhere in the tree you can define the context by rendering a `}<inlineCode parentName=\"p\">{`Provider`}</inlineCode>{` with the `}<inlineCode parentName=\"p\">{`value`}</inlineCode>{`\nyou would like to pass through context. You may have multiple instances of the `}<inlineCode parentName=\"p\">{`Provider`}</inlineCode>{` rendered\nin different parts of the page, or \"shadow\" a parent provider if they're nested. A `}<inlineCode parentName=\"p\">{`MyCtx.Provider`}</inlineCode>{`\nmust exist as an (indirect) parent of any component attempting to call `}<inlineCode parentName=\"p\">{`MyCtx.use`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`render() {\n  return (\n    <MyCtx.Provider value={{ color: 'hotpink' }}>\n      <B />\n    </MyCtx.Provider>\n  );\n}\n`}</code></pre>\n    <p>{`You may then access the context by calling `}<inlineCode parentName=\"p\">{`Ctx.use`}</inlineCode>{` with an optional selector function. If not provided,\nthen the entire context value will be returned.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`function B() {\n  const color = Ctx.use(state => state.color);\n  return <p style={{ color }}>Hello, World!</p>;\n}\n`}</code></pre>\n    <p>{`If you use typescript, then the value of `}<inlineCode parentName=\"p\">{`color`}</inlineCode>{` should be inferred to be `}<inlineCode parentName=\"p\">{`string`}</inlineCode>{`, as we defined\nthe context to be \\`Ctx<{ color: string }>.`}</p>\n    <h2 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h2>\n    <p>{`Here we have a few components that share a context with a foreground color, background color,\nand a callback which can update either.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`type Theme = {\n  fg: string;\n  bg: string;\n  update: (key: 'fg' | 'bg', value: string) => void;\n};\nconst ThemeCtx: Ctx<Theme> = makeCtx();\n`}</code></pre>\n    <p>{`Try pressing the buttons and notice the update counters, which are incremented on\neach render of the respective components.`}</p>\n    <CtxExample mdxType=\"CtxExample\" />\n    <p>{`The first section, it accesses the entire context with `}<inlineCode parentName=\"p\">{`const theme = ThemeCtx.use()`}</inlineCode>{`, and as\nsuch the containing component will render in reaction to any context update.`}</p>\n    <p>{`The other two components either access the foreground or background color individually.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`const fg = ThemeCtx.use((theme) => theme.fg);\n`}</code></pre>\n    <p>{`The result of evaluating that function doesn't change if only `}<inlineCode parentName=\"p\">{`theme.bg`}</inlineCode>{` is updated, so this\ncomponent isn't forced to update itself for changes it's unaffected by.`}</p>\n    <p>{`Note that by default, any update in React will cause the entire sub tree to update, so using\nan update blocking technique like `}<inlineCode parentName=\"p\">{`React.memo`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`React.useMemo`}</inlineCode>{` is required to limit the\nnatural rendering caused by any state change.`}</p>\n    <p>{`The example uses such a technique in the root component. You normally don't need to worry about this,\nbut if you are having performance issues due to context updates, it's a good thing to try.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`function CtxExample(props: {}) {\n  const [fg, setFg] = React.useState(FG_COLORS[0]);\n  const [bg, setBg] = React.useState(BG_COLORS[0]);\n  const theme: Theme = {\n    fg,\n    bg,\n    update(key, value) {\n      key === 'fg' ? setFg(value) : setBg(value);\n    },\n  };\n\n  const children = useMemo(\n    () => (\n      <div className=\"rearm-ctx-example\">\n        <Selector />\n        <Page />\n      </div>\n    ),\n    [],\n  );\n\n  return <ThemeCtx.Provider value={theme}>{children}</ThemeCtx.Provider>;\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}