{"version":3,"sources":["webpack:///../src/__docs__/portalgun.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"+bAMO,IAAMA,EAAe,Q,2KAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,uBADR,yBAGA,iBAAQ,CACN,GAAM,UADR,UAGA,uJACA,iBAAQ,CACN,GAAM,SADR,SAGA,uBAAK,sBAAMC,WAAW,OAAU,CAC5B,UAAa,wBADZ,2DAIL,iDAAgC,0BAAYA,WAAW,KAAvB,gBAAhC,6JACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,kNAeL,8EAA6D,0BAAYA,WAAW,KAAvB,UAA7D,6CAA6J,0BAAYA,WAAW,KAAvB,cAA7J,KACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,6TAeL,gDAA+B,0BAAYA,WAAW,KAAvB,cAA/B,6EAAmK,0BAAYA,WAAW,KAAvB,UAAnK,8CACA,mG,kKAKJJ,EAAWK,gBAAiB","file":"component---src-docs-portalgun-mdx-6296b31af935080d7fd0.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/frankiebagnardi/github/brigand/rearm/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"rearmuse-portal-gun\"\n    }}>{`@rearm/use-portal-gun`}</h1>\n    <h2 {...{\n      \"id\": \"intent\"\n    }}>{`Intent`}</h2>\n    <p>{`The PortalGun module allows defining UI in one place in the tree, and shooting it to a near-by location elsewhere in the tree.`}</p>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import usePortalGun from 'rearm/lib/PortalGunHooks';\n`}</code></pre>\n    <p>{`First you'll need a hook `}<inlineCode parentName=\"p\">{`usePortalGun`}</inlineCode>{`. Each hook gets its own Source and Dest component. You may use Dest multiple times, but with multiple Source elements the order of results is undefined.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`function TestUi() {\n  const [Source, Dest] = usePortalGun();\n\n  return (\n    <>\n      <TestSource Source={Source} />\n      <div data-testid=\"dest\">\n        <Dest />\n      </div>\n    </>\n  );\n}\n`}</code></pre>\n    <p>{`Then you'll need a component to provide the value for `}<inlineCode parentName=\"p\">{`Source`}</inlineCode>{`. In this example, that'll be done inside `}<inlineCode parentName=\"p\">{`TestSource`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`function TestSource({ Source }) {\n  const [counter, setCounter] = React.useState(1);\n\n  return (\n    <>\n      <button data-testid=\"incr\" onClick={() => setCounter(c => c + 1)}>Incr</button>\n      <Source>\n        <span data-testid=\"source\">{\\`Count: \\${counter}\\`}</span>\n      </Source>\n    </>\n  );\n}\n`}</code></pre>\n    <p>{`Note that in this case, `}<inlineCode parentName=\"p\">{`TestSource`}</inlineCode>{` holds the full state and defines the UI for representing that state, but `}<inlineCode parentName=\"p\">{`TestUi`}</inlineCode>{` decides where to put the rendered output.`}</p>\n    <p>{`If there isn't currently a Source element, then Dest will render nothing.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}